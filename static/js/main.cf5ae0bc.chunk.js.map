{"version":3,"sources":["components/Clock/clock.jsx","components/SnakeGame/Snake.jsx","components/SnakeGame/Food.jsx","components/SnakeGame/SnakeMain.jsx","components/Sliders/SlidersMain.jsx","App.js","reducers/counter.js","reducers/isLogged.js","reducers/index.js","index.js"],"names":["Clock","pause","start","useState","seconds","setSeconds","minute","setMinute","hour","setHour","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","doubleDigitTime","time","slice","style","background","border","padding","color","props","snakeBlock","map","block","key","left","top","className","food","SnakeMain","onKeyDown","event","state","directionNew","oldDirection","direrction","keyCode","setState","onStart","startNew","onPause","pauseNew","snakeMove","body","head","length","push","shift","SnakeGenerateFood","Math","floor","random","snakeEnlarge","newSnakeBody","unshift","snakeSpeedIncrease","speed","interval","checkEatFood","score","checkIfOut","onGameOver","checkIfBiteItself","pop","forEach","value","alert","initialState","this","document","onkeydown","Snake","Food","onClick","disabled","Component","App","useSelector","counter","useDispatch","path","component","SnakeGame","counterReducer","action","type","loggedReducer","allReducers","combineReducers","isLogged","store","createStore","allReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.cf5ae0bc.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nconst Clock = ({ pause, start }) => {\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [minute, setMinute] = useState(0);\r\n  const [hour, setHour] = useState(0);\r\n\r\n  useInterval(() => {\r\n    if (!pause && start) {\r\n      setSeconds(seconds + 1);\r\n      if (seconds === 60) {\r\n        setMinute(minute + 1);\r\n        setSeconds(0);\r\n      }\r\n      if (minute === 60) {\r\n        setHour(hour + 1);\r\n        setMinute(0);\r\n      }\r\n    } else {\r\n      if ((seconds !== 0 || minute !== 0 || hour !== 0) && !start) {\r\n        setSeconds(0);\r\n        setMinute(0);\r\n        setHour(0);\r\n      }\r\n    }\r\n  }, 1000);\r\n\r\n  function useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n    useEffect(() => {\r\n      savedCallback.current = callback;\r\n    });\r\n    useEffect(() => {\r\n      function tick() {\r\n        savedCallback.current();\r\n      }\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }, [delay]);\r\n  }\r\n\r\n  const doubleDigitTime = (time) => {\r\n    return (\"0\" + time).slice(-2);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Clock</h1>\r\n      <h4\r\n        style={{\r\n          background: \"#ff7272\",\r\n          border: \"2px solid black\",\r\n          padding: \"5px\",\r\n          color: \"white\",\r\n        }}\r\n      >\r\n        {doubleDigitTime(hour)} : {doubleDigitTime(minute)} :\r\n        {doubleDigitTime(seconds)}\r\n      </h4>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Clock;\r\n","import React from \"react\";\r\n\r\nexport default (props) => {\r\n  return (\r\n    <div>\r\n      {props.snakeBlock.map((block, key) => {\r\n        const style = {\r\n          left: `${block[0]}%`,\r\n          top: `${block[1]}%`,\r\n        };\r\n        return <div className=\"snakeblock\" key={key} style={style}></div>;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport default (props) => {\r\n  const style = {\r\n    left: `${props.food[0]}%`,\r\n    top: `${props.food[1]}%`,\r\n  };\r\n  return <div className=\"food\" style={style}></div>;\r\n};\r\n","import React, { Component } from \"react\";\r\nimport Clock from \"../Clock/clock\";\r\nimport Snake from \"./Snake\";\r\nimport Food from \"./Food\";\r\nimport \"./SnakeMaincss.css\";\r\n\r\nclass SnakeMain extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      pause: false,\r\n      start: false,\r\n      direrction: \"right\",\r\n      food: this.SnakeGenerateFood(),\r\n      score: 0,\r\n      snakeBlock: [\r\n        [0, 0],\r\n        [2, 0],\r\n        [4, 0],\r\n      ],\r\n    };\r\n\r\n    this.speed = 200;\r\n    this.initialState = this.state;\r\n  }\r\n\r\n  //  LifeCycle Methods\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => {\r\n      if (this.state.start && !this.state.pause) this.snakeMove();\r\n    }, this.speed);\r\n\r\n    document.onkeydown = this.onKeyDown;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.checkIfOut();\r\n    this.checkIfBiteItself();\r\n    this.checkEatFood();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  //  Change Direction When A key Is Pressed\r\n\r\n  onKeyDown = (event) => {\r\n    if (this.state.start) {\r\n      let directionNew = null;\r\n      let oldDirection = this.state.direrction;\r\n\r\n      switch (event.keyCode) {\r\n        case 38:\r\n          if (oldDirection === \"down\") return;\r\n          directionNew = \"up\";\r\n          break;\r\n        case 40:\r\n          if (oldDirection === \"up\") return;\r\n          directionNew = \"down\";\r\n          break;\r\n        case 37:\r\n          if (oldDirection === \"right\") return;\r\n          directionNew = \"left\";\r\n          break;\r\n        case 39:\r\n          if (oldDirection === \"left\") return;\r\n          directionNew = \"right\";\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n\r\n      this.setState({ direrction: directionNew });\r\n    }\r\n  };\r\n\r\n  //  Start and Pause Methods\r\n\r\n  onStart = () => {\r\n    const startNew = !this.state.start;\r\n    this.setState({ start: startNew });\r\n  };\r\n\r\n  onPause = () => {\r\n    const pauseNew = !this.state.pause;\r\n    this.setState({ pause: pauseNew });\r\n  };\r\n\r\n  //  Methods To Change The Snake's State\r\n\r\n  snakeMove = () => {\r\n    let body = [...this.state.snakeBlock];\r\n    let head = body[body.length - 1];\r\n\r\n    switch (this.state.direrction) {\r\n      case \"right\":\r\n        head = [head[0] + 2, head[1]];\r\n        break;\r\n      case \"left\":\r\n        head = [head[0] - 2, head[1]];\r\n        break;\r\n      case \"up\":\r\n        head = [head[0], head[1] - 2];\r\n        break;\r\n      default:\r\n        head = [head[0], head[1] + 2];\r\n        break;\r\n    }\r\n    body.push(head);\r\n    body.shift();\r\n    this.setState({\r\n      snakeBlock: body,\r\n    });\r\n  };\r\n\r\n  SnakeGenerateFood = () => {\r\n    let min = 1,\r\n      max = 98;\r\n    let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n    let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n    return [x, y];\r\n  };\r\n\r\n  snakeEnlarge = () => {\r\n    let newSnakeBody = [...this.state.snakeBlock];\r\n    newSnakeBody.unshift([]);\r\n    this.setState({ snakeBlock: newSnakeBody });\r\n  };\r\n\r\n  snakeSpeedIncrease = () => {\r\n    if (this.speed > 10) {\r\n      this.speed -= 5;\r\n      clearInterval(this.interval);\r\n\r\n      this.interval = setInterval(() => {\r\n        if (this.state.start && !this.state.pause) this.snakeMove();\r\n      }, this.speed);\r\n    }\r\n  };\r\n\r\n  //  Methods To Check The Break Conditions\r\n\r\n  checkEatFood = () => {\r\n    const head = this.state.snakeBlock[this.state.snakeBlock.length - 1];\r\n    const food = this.state.food;\r\n    if (head[0] === food[0] && head[1] === food[1]) {\r\n      this.setState({ score: this.state.score + 1 });\r\n      this.setState({ food: this.SnakeGenerateFood() });\r\n      this.snakeEnlarge();\r\n      this.snakeSpeedIncrease();\r\n    }\r\n  };\r\n\r\n  checkIfOut = () => {\r\n    let head = this.state.snakeBlock[this.state.snakeBlock.length - 1];\r\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\r\n      this.onGameOver();\r\n    }\r\n  };\r\n\r\n  checkIfBiteItself = () => {\r\n    const body = [...this.state.snakeBlock];\r\n    const head = body[body.length - 1];\r\n\r\n    body.pop();\r\n\r\n    body.forEach((value) => {\r\n      if (value[0] === head[0] && value[1] === head[1]) {\r\n        this.onGameOver();\r\n      }\r\n    });\r\n  };\r\n\r\n  //  Game Over Function\r\n\r\n  onGameOver = () => {\r\n    alert(`Game Over. Your Score is ${this.state.score}`);\r\n    this.setState(this.initialState);\r\n    this.speed = 200;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SnakeContainer\">\r\n        <div className=\"content\">\r\n          <div className=\"grid\">\r\n            <Snake snakeBlock={this.state.snakeBlock} />\r\n            <Food food={this.state.food} />\r\n          </div>\r\n\r\n          <div className=\"clock\">\r\n            <Clock pause={this.state.pause} start={this.state.start} />\r\n            <button onClick={this.onStart} disabled={this.state.start}>\r\n              <p>Start</p>\r\n            </button>\r\n            &nbsp;\r\n            <button onClick={this.onPause} disabled={!this.state.start}>\r\n              {this.state.pause ? <p>Resume</p> : <p>Pause</p>}\r\n            </button>\r\n            <h2>Score</h2>\r\n            <h2>{this.state.score}</h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SnakeMain;\r\n","import React, { Component } from \"react\";\r\nimport Clock from \"../Clock/clock\";\r\n\r\nclass SlidersMain extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      start: false,\r\n      pause: false,\r\n      score: 0,\r\n      position: [],\r\n      enimies: [\r\n        { type: 1, position: [0, 5] },\r\n        { type: 2, position: [2, 6] },\r\n        { type: 1, position: [1, 7] },\r\n      ],\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SliderContainer\">\r\n        <div className=\"content\">\r\n          <div className=\"grid\"></div>\r\n\r\n          <div\r\n            className=\"clock\"\r\n            style={{ textAlign: \"center\", margin: \"auto\" }}\r\n          >\r\n            <Clock pause={this.state.pause} start={this.state.start} />\r\n            <button onClick={this.onStart} disabled={this.state.start}>\r\n              <p>Start</p>\r\n            </button>\r\n            &nbsp;\r\n            <button onClick={this.onPause} disabled={!this.state.start}>\r\n              {this.state.pause ? <p>Resume</p> : <p>Pause</p>}\r\n            </button>\r\n            <h2>Score</h2>\r\n            <h2>{this.state.score}</h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SlidersMain;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { increment, decrement } from \"./actions\";\nimport SnakeGame from \"./components/SnakeGame/SnakeMain\";\nimport Sliders from \"./components/Sliders/SlidersMain\";\n\nfunction App() {\n  const counter = useSelector((state) => state.counter);\n  const dispatch = useDispatch();\n\n  return (\n    <Router>\n      <Route path=\"/\" component={SnakeGame} />\n    </Router>\n  );\n}\n\nexport default App;\n","const counterReducer = (state = 0, action) => {\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      return state + 1;\r\n    case \"DECREMENT\":\r\n      return state - 1;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default counterReducer;\r\n","const loggedReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n    case \"SIGN_IN\":\r\n      return !state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default loggedReducer;\r\n","import counterReducer from \"./counter\";\r\nimport loggedReducer from \"./isLogged\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst allReducers = combineReducers({\r\n  counter: counterReducer,\r\n  isLogged: loggedReducer,\r\n});\r\n\r\nexport default allReducers;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { createStore } from \"redux\";\nimport allReducer from \"./reducers\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(\n  allReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}